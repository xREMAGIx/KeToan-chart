{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["columns","id","label","align","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","paper","minWidth","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","root","marginTop","width","container","maxHeight","center","margin","tableHead","primary","main","color","contrastText","CustomizedLabel","props","x","y","stroke","value","dy","fill","fontSize","textAnchor","App","classes","React","useState","open","setOpen","count","setCount","cpkh","cvkh","cptt","cvtt","formData","setFormData","dataTable","setDataTable","handleTextFieldChange","e","target","name","keyPressed","key","handleTableDataChange","data","Fragment","className","height","top","right","left","bottom","strokeDasharray","dataKey","yAxisId","domain","orientation","type","Button","variant","onClick","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Grid","direction","item","TextField","disabled","onChange","onKeyPress","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","TableBody","row","index","Boolean","window","location","hostname","match","createMuiTheme","dark","secondary","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3d107ec7.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst columns = [\n  { id: \"name\", label: \"Name\" },\n  { id: \"cpkh\", label: \"Chi Phi Ke Hoach\", align: \"right\" },\n  {\n    id: \"cvkh\",\n    label: \"Cong Viec Ke Hoach\",\n\n    align: \"right\",\n  },\n  {\n    id: \"cptt\",\n    label: \"Chi Phi Thuc Te\",\n\n    align: \"right\",\n  },\n  {\n    id: \"cvtt\",\n    label: \"Cong Viec Thuc Te\",\n\n    align: \"right\",\n  },\n];\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    minWidth: \"300px\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  root: {\n    marginTop: theme.spacing(3),\n    width: \"90%\",\n  },\n  container: {\n    maxHeight: 400,\n  },\n  center: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    margin: theme.spacing(2),\n  },\n  tableHead: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n  },\n}));\n\nfunction CustomizedLabel(props) {\n  const { x, y, stroke, value } = props;\n  return (\n    <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor=\"middle\">\n      {value}\n    </text>\n  );\n}\n\nfunction App() {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n\n  const [count, setCount] = React.useState(1);\n\n  const [formData, setFormData] = React.useState({\n    cpkh: 0,\n    cvkh: 0,\n    cptt: 0,\n    cvtt: 0,\n  });\n\n  const [dataTable, setDataTable] = React.useState([]);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleTextFieldChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const keyPressed = (e) => {\n    if (e.key === \"Enter\") handleTableDataChange();\n  };\n\n  const handleTableDataChange = () => {\n    let data = { ...formData, name: count };\n    if (data.cptt === \"\") data.cptt = null;\n    if (data.cvtt === \"\") data.cvtt = null;\n    setDataTable([...dataTable, data]);\n    setFormData({ cpkh: 0, cvkh: 0, cptt: 0, cvtt: 0 });\n    setCount((count) => count + 1);\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.center}>\n        <LineChart\n          width={500}\n          height={300}\n          data={dataTable}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis yAxisId=\"left\" domain={[0, 100]} />\n          <YAxis yAxisId=\"right\" orientation=\"right\" domain={[0, 200]} />\n          <Tooltip />\n          <Legend />\n          <Line\n            yAxisId=\"left\"\n            type=\"monotone\"\n            dataKey=\"cpkh\"\n            stroke=\"#CF2D05\"\n            label={<CustomizedLabel />}\n          />\n          <Line\n            yAxisId=\"left\"\n            type=\"monotone\"\n            dataKey=\"cptt\"\n            stroke=\"#42CF05\"\n            label={<CustomizedLabel />}\n          />\n          <Line\n            yAxisId=\"right\"\n            type=\"monotone\"\n            dataKey=\"cvkh\"\n            stroke=\"#05A7CF\"\n            label={<CustomizedLabel />}\n          />\n          <Line\n            yAxisId=\"right\"\n            type=\"monotone\"\n            dataKey=\"cvtt\"\n            stroke=\"#9205CF\"\n            label={<CustomizedLabel />}\n          />\n        </LineChart>\n      </div>\n\n      <div className={classes.center}>\n        <Button variant=\"contained\" color=\"primary\" onClick={handleOpen}>\n          Add new Data\n        </Button>\n        <Modal\n          aria-labelledby=\"transition-modal-title\"\n          aria-describedby=\"transition-modal-description\"\n          className={classes.modal}\n          open={open}\n          onClose={handleClose}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n          BackdropProps={{\n            timeout: 500,\n          }}\n        >\n          <Fade in={open}>\n            <div className={classes.paper}>\n              <h2 id=\"transition-modal-title\">Add data modal</h2>\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"center\"\n                spacing={2}\n              >\n                <Grid item>\n                  <TextField\n                    id=\"name-input\"\n                    label=\"Ngay\"\n                    variant=\"outlined\"\n                    value={count}\n                    disabled\n                    name=\"name\"\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"cpkh-input\"\n                    label=\"Chi Phi Ke Hoach\"\n                    variant=\"outlined\"\n                    value={formData.cpkh}\n                    type=\"number\"\n                    name=\"cpkh\"\n                    onChange={(e) => handleTextFieldChange(e)}\n                    onKeyPress={(e) => keyPressed(e)}\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"cvkh-input\"\n                    label=\"Cong Viec Ke Hoach\"\n                    variant=\"outlined\"\n                    value={formData.cvkh}\n                    type=\"number\"\n                    name=\"cvkh\"\n                    onChange={(e) => handleTextFieldChange(e)}\n                    onKeyPress={(e) => keyPressed(e)}\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"cptt-input\"\n                    label=\"Chi Phi Thuc Te\"\n                    variant=\"outlined\"\n                    value={formData.cptt}\n                    type=\"number\"\n                    name=\"cptt\"\n                    onChange={(e) => handleTextFieldChange(e)}\n                    onKeyPress={(e) => keyPressed(e)}\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"cvtt-input\"\n                    label=\"Cong Viec Thuc Te\"\n                    variant=\"outlined\"\n                    value={formData.cvtt}\n                    type=\"number\"\n                    name=\"cvtt\"\n                    onChange={(e) => handleTextFieldChange(e)}\n                    onKeyPress={(e) => keyPressed(e)}\n                  />\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleTableDataChange()}\n                  >\n                    Add\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Fade>\n        </Modal>\n      </div>\n\n      <div className={classes.center}>\n        <Paper className={classes.root}>\n          <TableContainer className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n              <TableHead>\n                <TableRow>\n                  {columns.map((column) => (\n                    <TableCell\n                      className={classes.tableHead}\n                      key={column.id}\n                      align={column.align}\n                    >\n                      {column.label}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {dataTable.map((row, index) => (\n                  <TableRow key={index}>\n                    <TableCell>{row.name}</TableCell>\n                    <TableCell align=\"right\">{row.cpkh}</TableCell>\n                    <TableCell align=\"right\">{row.cvkh}</TableCell>\n                    <TableCell align=\"right\">{row.cptt}</TableCell>\n                    <TableCell align=\"right\">{row.cvtt}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#FFC0CB\t\", dark: \"#DB7093\t\", contrastText: \"#000\" },\n    secondary: { main: \"#03a9f4\", contrastText: \"#000\" },\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}